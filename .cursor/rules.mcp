  You are an expert in Python, FastAPI, microservices architecture, and serverless environments.

  This projects uses micromamba envoriment, to activate it:
  > micromamba activate `basename "$PWD"`

  Advanced Principles
  - Design services to be stateless; leverage external storage and caches (e.g., Redis) for state persistence.
  - Implement API gateways and reverse proxies (e.g., NGINX, Traefik) for handling traffic to microservices.
  - Use circuit breakers and retries for resilient service communication.
  - Favor serverless deployment for reduced infrastructure overhead in scalable environments.
  - Use asynchronous workers (e.g., Celery, RQ) for handling background tasks efficiently.
  - All secrets and configmap must be listed in src/core/settings.py
  - All secrets values must be stored on .env file
  - All dependencies must be added in setup.cfg file, It is not necessary to fix the version for all libraries, only when there is a specific reason
  - Avoid to use unnecessary classes
  - Use KISS principle
  - Should not have trivial comments, such as # connect to mongodb; mongodb.connect()

  Type Safety and Data Structures
  - NEVER use generic dict[str, Any] or JSONResponse for structured data
  - ALWAYS use TypedDict for structured dictionary data
  - Each TypedDict must be properly documented with docstring and field descriptions
  - Place TypedDict definitions inside models folder within each module
  - Example of proper TypedDict usage:
    ```python
    class UserData(TypedDict):
        """User data structure.

        Fields:
            id: Unique user identifier
            username: User's display name
            created_at: Account creation timestamp
        """
        id: str
        username: str
        created_at: datetime
    ```
  - Use TypedDict for:
    - API request/response models
    - Database documents
    - Message payloads
    - Configuration structures
    - Any dictionary with known field structure
  - When extending TypedDict, use proper inheritance and document all fields:
    ```python
    class BaseDocument(TypedDict):
        """Base document fields.

        Fields:
            id: Document unique identifier
            created_at: Document creation timestamp
        """
        id: str
        created_at: datetime

    class UserDocument(BaseDocument):
        """User document with additional fields.

        Fields:
            username: User's display name
            email: User's email address
        """
        username: str
        email: str
    ```
  - Only use dict[str, Any] for truly dynamic data where structure is unknown
  - For optional fields in TypedDict, use NotRequired:
    ```python
    from typing import NotRequired

    class UserProfile(TypedDict):
        """User profile data.

        Fields:
            name: User's full name
            age: User's age (optional)
            bio: User's biography (optional)
        """
        name: str
        age: NotRequired[int]
        bio: NotRequired[str]
    - Use `type` instead of `Type` for type annotation
    ```

  Microservices and API Gateway Integration
  - Integrate FastAPI services with API Gateway solutions like AWS API Gateway.
  - Use API Gateway for rate limiting, request transformation, and security filtering.
  - Design APIs with clear separation of concerns to align with microservices principles.
  - Implement inter-service communication using message brokers (RabbitMQ) for event-driven architectures.

  Serverless and Cloud-Native Patterns
  - Optimize FastAPI apps for serverless environments (e.g., AWS Lambda, Azure Functions) by minimizing cold start times.
  - Package FastAPI applications using lightweight containers or as a standalone binary for deployment in serverless setups.
  - Use managed services (NOSQL AWS documentdb) for scaling databases without operational overhead.
  - Implement automatic scaling with serverless functions to handle variable loads effectively.

  Advanced Middleware and Security
  - Implement custom middleware for detailed logging, tracing, and monitoring of API requests.
  - Use OpenTelemetry or similar libraries for distributed tracing in microservices architectures.
  - Apply security best practices: OAuth2 for secure API access, rate limiting, and DDoS protection.
  - Use security headers (e.g., CORS, CSP) and implement content validation using tools like OWASP Zap.

  Optimizing for Performance and Scalability
  - Leverage FastAPI's async capabilities for handling large volumes of simultaneous connections efficiently.
  - Optimize backend services for high throughput and low latency; use databases optimized for read-heavy workloads (e.g., Elasticsearch).
  - Use caching layers (e.g., Redis, Memcached) to reduce load on primary databases and improve API response times.
  - Apply load balancing and service mesh technologies (e.g., Istio, Linkerd) for better service-to-service communication and fault tolerance.

  Monitoring and Logging
  - Use Prometheus and Grafana for monitoring FastAPI applications and setting up alerts.
  - Implement structured logging for better log analysis and observability.
  - Integrate with centralized logging systems (e.g., ELK Stack, AWS CloudWatch) for aggregated logging and monitoring.

  Key Conventions
  1. Follow microservices principles for building scalable and maintainable services.
  2. Optimize FastAPI applications for serverless and cloud-native deployments.
  3. Apply advanced security, monitoring, and optimization techniques to ensure robust, performant APIs.
  4. Each function must have a proper test in pytest style
  5. Also must have integration tests
  6. It must run locally
  7. Run pytest and check if all tests pass
  8. The "coverage report -m" should have mean coverage above 90%

  Type Checking Rules
  - Project uses Python 3.12
  - All source code in src/ directory must have complete type annotations
  - Test files in tests/ directory are exempt from the no-untyped-def rule
  - Use mypy for static type checking with strict mode enabled
  - Configure mypy to ignore no-untyped-def errors in test files:
    [mypy]
    python_version = 3.12
    disallow_untyped_defs = True

    [mypy-tests.*]
    disallow_untyped_defs = False

  Refer to FastAPI, microservices, and serverless documentation for best practices and advanced usage patterns.
  Please, use RUFF and Mypy style guide
