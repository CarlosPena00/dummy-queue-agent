---
description:
globs:
alwaysApply: true
---

You are an expert in Python 3.12, FastAPI, microservices architecture, and serverless environments.
All code must be idiomatic, typed, testable, and observable with performance and simplicity in mind.

====================================
🔧 Environment Setup
====================================

This project uses Micromamba for environment isolation.

Activate the environment using:
> micromamba activate "$(basename "$PWD")"

====================================
📐 Engineering Principles
====================================

- Design stateless services. Persist state externally (e.g., Redis, S3, DocumentDB, Postgres).
- Use API gateways (NGINX, Traefik, AWS API Gateway) for traffic control and security.
- Apply circuit breakers, retries, and timeouts for inter-service resilience.
- Favor serverless deployment (AWS Lambda, Azure Functions) for scalable execution.
- All secrets/configs must be defined in `src/settings.py` and values stored in `.env`.
- Declare dependencies in `setup.cfg`; only pin versions if justified.
- Follow the KISS principle; avoid unnecessary classes.
- Do NOT include trivial comments (e.g., # connect to MongoDB).
- Each test should validate a single behavior using fine-grained naming:
  ✅ test_price_schema_validation_when_valid_payload
  ✅ test_price_schema_validation_when_invalid_price
- Ensure each endpoint has a smoke test.
- Each flow must have integration test.

====================================
📦 TypedDicts and Type Safety
====================================

- NEVER use `dict[str, Any]` or `JSONResponse` for structured data.
- ALWAYS use `TypedDict` for all structured dictionaries:
  - API request/response schemas
  - Database documents
  - Broker messages
  - Configuration structures

- Place all TypedDicts in the `models/` folder of each module.
- Every TypedDict must include complete docstrings:

Example:
```python
class UserData(TypedDict):
    """User data structure.

    Fields:
        id: Unique identifier
        username: Display name
        created_at: Timestamp
    """
    id: str
    username: str
    created_at: datetime
```

- Inherit TypedDicts when needed and document all fields.
- Use `NotRequired` for optional fields:

```python
from typing import NotRequired

class UserProfile(TypedDict):
    name: str
    age: NotRequired[int]
    bio: NotRequired[str]
```

- Use PEP 604/585:
  - ✅ dict instead of typing.Dict
  - ✅ str | None instead of typing.Union
  - ✅ tuple instead of typing.Tuple
  - ✅ type instead of Type
- After code changes, run:
  > ruff check --fix --unsafe-fixes

====================================
🔀 Microservices & API Gateway
====================================

- Integrate FastAPI with AWS API Gateway (rate-limiting, filtering, routing).
- Follow separation-of-concerns when designing services.
- Use RabbitMQ for message-based async comms.
- Interface using `faststream` for message broker validation and FastAPI hooks.

====================================
☁️ Serverless Best Practices
====================================

- Optimize cold start: avoid heavy imports, minimize dependencies.
- Use AWS DocumentDB for NoSQL persistence.
- Enable auto-scaling via serverless configuration.

====================================
🔐 Middleware & Security
====================================

- Create custom middleware for tracing, logging, metrics.
- Integrate OpenTelemetry for distributed tracing.
- Apply:
  - OAuth2 for secured routes
  - Rate-limiting
  - DDoS protection
  - CORS, CSP headers
  - OWASP Zap for security regression testing

====================================
🚀 Performance & Scalability
====================================

- Use FastAPI async handlers for I/O-bound concurrency.
- Optimize reads with systems like Elasticsearch or Redis.
- Leverage caching layers to avoid DB pressure.
- Deploy service meshes (e.g., Istio, Linkerd) for routing, retries, health checks.

====================================
📈 Monitoring & Logging
====================================

- Use Prometheus + Grafana for metrics, uptime, alerting.
- Use loguru library to write logs
- Centralize logs with ELK/CloudWatch and use structured logging.

====================================
🧪 Testing & Coverage
====================================

- Every code (function/class/etc) must be covered with:
  - Unit tests (Allowed to mock IO such as RabbitMQ broker, MongoDB, Postgres, etc)
  - Endpoint tests
  - Integration tests
- Naming pattern: `test_<function/class>_<scenario>`
- Use `pytest`, validate with:
  > pytest && coverage report -m
- Maintain ≥ 90% coverage
- Ensure local run without external dependencies

====================================
🧰 Type Checking Rules
====================================

- Python 3.12 only.
- All `src/` code must have complete type annotations.
- `tests/` are exempt from the `no-untyped-def` rule.

mypy config:
```ini
[mypy]
python_version = 3.12
disallow_untyped_defs = True

[mypy-tests.*]
disallow_untyped_defs = False
```

====================================
📚 References
====================================

- FastAPI: https://fastapi.tiangolo.com
- FastStream: https://faststream.dev
- OpenTelemetry: https://opentelemetry.io/docs/instrumentation/python/
- AWS Serverless Patterns: https://serverlessland.com/patterns
